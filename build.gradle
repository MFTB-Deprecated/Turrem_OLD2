allprojects 
{
    apply plugin: 'java'
    group = 'net.turrem'
    version = '1.0'
	
	repositories 
	{
		mavenCentral()
	}
}

File bin = file("/bin/")
File libDir = file("$bin/libs/")

def commonLibs = []
def clientLibs = []
def serverLibs = []

commonLibs << 'com.google.guava:guava:18.0'
commonLibs << 'com.google.code.gson:gson:2.3'
clientLibs << 'org.lwjgl.lwjgl:lwjgl:2.9.1'
clientLibs << 'org.lwjgl.lwjgl:lwjgl_util:2.9.1'
commonLibs << 'net.sf.trove4j:trove4j:3.0.3'
commonLibs << 'org.apache.logging.log4j:log4j:2.1'
commonLibs << 'org.apache.commons:commons-io:1.3.2'

def platforms = ['windows', 'linux', 'osx']
platforms.each 
{ 
	platform -> task "${platform}Natives" {
        def outputDir = "$libDir/natives/$platform"
        inputs.files(configurations.compile)
        outputs.dir(outputDir)
        doLast 
		{
            copy 
			{
                def artifacts = configurations.compile.resolvedConfiguration.resolvedArtifacts.findAll { it.classifier == "natives-$platform" }
                artifacts.each 
				{
					exclude "**/META-INF/**"
                    from zipTree(it.file)
                }            
                into outputDir
            }
        }
    }
}

task natives {
    description "Moves natives into the lib/natives/ directory"
    dependsOn platforms.collect { "${it}Natives" }.findAll { tasks[it] }
}

task libJars {
	description "Moves library jars into the lib/ directory"
	dependsOn natives
    doLast 
	{
		copy
		{
			configurations.compile.files.each
			{ File file -> 
				exclude "**/*-natives-*.jar"
				from file.getParent()
				include file.getName()
			}
			into libDir
		}
	}
}

task appAssets(type: Copy) {
	from 'app/assets/'
	into "$bin/assets/"
}

task assets {
	dependsOn appAssets
}

task makeBin {
	dependsOn assets, libJars
}

dependencies
{
	compile commonLibs
	compile clientLibs
	compile serverLibs
}

configure(subprojects) 
{
	def n = it.path
	if (n ==~ ':(app|mod|coremod):(client|common|server)')
	{		
		apply plugin: 'java'
		apply plugin: 'eclipse'
		
		def partname = n.substring(1,n.lastIndexOf(':'))
		def sidename = n.substring(n.lastIndexOf(':') + 1)
		
		def isApp = partname == 'app'
		def isMod = partname == 'mod'
		def isCoremod = partname == 'coremod'
		
		def isClient = sidename == 'client'
		def isCommon = sidename == 'common'
		def isServer = sidename == 'server'
		
		dependencies
		{
			runtime commonLibs
			if (isClient)
			{
				compile project(":$partname:common")
				runtime clientLibs
			}
			if (isServer)
			{
				compile project(":$partname:common")
				runtime clientLibs
			}
		}
	}
}