allprojects 
{
    apply plugin: 'java'
    group = 'net.turrem'
    version = '0.3.0'
	
	repositories 
	{
		mavenCentral()
		maven
		{
			url "http://maven.geotoolkit.org/"
		}
	}
}

File bin = file("$buildDir/turrem/")
File run = file("/bin/")

def commonLibs = []
def clientLibs = []
def serverLibs = []

commonLibs << 'com.google.guava:guava:18.0'
commonLibs << 'com.google.code.gson:gson:2.3'
clientLibs << 'org.lwjgl.lwjgl:lwjgl:2.9.1'
clientLibs << 'org.lwjgl.lwjgl:lwjgl_util:2.9.1'
commonLibs << 'net.sf.trove4j:trove4j:3.0.3'
commonLibs << 'org.apache.logging.log4j:log4j:2.1'
commonLibs << 'org.apache.commons:commons-io:1.3.2'
commonLibs << 'java3d:vecmath:1.5.2'

task cleanBin(type: Delete) {
	delete bin
}

def platforms = ['windows', 'linux', 'osx']
platforms.each 
{ 
	platform -> task "${platform}Natives" {
		dependsOn cleanBin
        def outputDir = "$bin/libs/native/$platform"
        inputs.files(configurations.compile)
        outputs.dir(outputDir)
        doLast 
		{
            copy 
			{
                def artifacts = configurations.compile.resolvedConfiguration.resolvedArtifacts.findAll { it.classifier == "natives-$platform" }
                artifacts.each 
				{
					exclude "**/META-INF/**"
                    from zipTree(it.file)
                }            
                into outputDir
            }
        }
    }
}

task natives {
    description "Moves natives into the lib/native/ directory"
    dependsOn platforms.collect { "${it}Natives" }.findAll { tasks[it] }
}

task makeLibs {
	description "Moves library jars into the lib/ directory"
	dependsOn cleanBin
	dependsOn natives
    doLast 
	{
		copy
		{
			configurations.compile.files.each
			{ File file -> 
				exclude "**/*-natives-*.jar"
				from file.getParent()
				include file.getName()
			}
			into "$bin/libs/"
		}
	}
}

task appAssets(type: Copy) {
	dependsOn cleanBin
	from 'app/assets/'
	into "$bin/assets/"
}

task appClient(type: Jar) {
	baseName = 'app-client'
	from project(":app:client").sourceSets.main.output
	from project(":app:common").sourceSets.main.output
}

task makeApp(type: Copy) {
	dependsOn appAssets, appClient
	from file(appClient.archivePath).getParent()
	include file(appClient.archivePath).getName()
	rename 'app-(.+)-(.*)\\.jar', '$1.jar'
	into "$bin/jars/" 
}

task coremodAssets(type: Copy) {
	dependsOn cleanBin
	from 'coremod/assets/'
	into "$bin/mods/core/assets/"
}

task makeCoremod {
	dependsOn coremodAssets
}

task modAssets(type: Copy) {
	dependsOn cleanBin
	from 'mod/assets/'
	into "$bin/mods/turrem/assets/"
}

task makeMod {
	dependsOn modAssets
}

task makeBin {
	dependsOn makeApp, makeCoremod, makeMod, makeLibs
}

task binZip(type: Zip) {
	dependsOn makeBin
	from bin
	include "libs/**"
	include "jars/**"
	include "assets/**"
}

artifacts
{
	archives (binZip.archivePath)
}

task install(type: Copy) {
	dependsOn binZip
	from zipTree(binZip.archivePath)
	into run
}

dependencies
{
	compile commonLibs
	compile clientLibs
	compile serverLibs
}

configure(subprojects) 
{
	def n = it.path
	if (n ==~ ':(app|mod|coremod):(client|common|server)')
	{		
		apply plugin: 'java'
		apply plugin: 'eclipse'
		
		def partname = n.substring(1,n.lastIndexOf(':'))
		def sidename = n.substring(n.lastIndexOf(':') + 1)
		
		def isApp = partname == 'app'
		def isMod = partname == 'mod'
		def isCoremod = partname == 'coremod'
		
		def isClient = sidename == 'client'
		def isCommon = sidename == 'common'
		def isServer = sidename == 'server'
		
		eclipse 
		{
			project 
			{
				name = partname + "." + sidename
			}
		}
		
		dependencies
		{
			compile commonLibs
			if (isClient)
			{
				compile project(":$partname:common")
				compile clientLibs
			}
			if (isServer)
			{
				compile project(":$partname:common")
				compile clientLibs
			}
		}
	}
}